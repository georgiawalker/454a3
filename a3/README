For this assignment, you've got to read and understand much of the
code.  This README file contains only some of the information that
you'll need.

1. The Renderer

1.1 How to run it

  On Linux, execute

    ./rt [flags] inputFilename

  On Windows, open a 'cmd' window, change to the folder containing
  this assignment, and execute

    .\rt.exe inputFilename

  If you are running on Windows in an IDE, include the inputFilename
  as one of the command-line arguments when running in that IDE.

  The inputFilename is one of the scene descriptions in the 'worlds'
  directory, like 'worlds/testTeapot'.  Start with worlds/testBasic .

  If you find that raytracing takes too long, you can decrease the ray
  depth ('maxDepth' in scene.h) or decrease the window size (on the
  'new RTwindow' line in main.cpp).

1.2 Options in the window

  To interact:

    In the rendering window, press '?' to have the program print out
    information about interacting with the scene.  The information
    will be shown in the terminal window.

  To help debug:

    LEFT-CLICK the mouse on a pixel to see the rays traced through
    that pixel.  (This is useful for debugging your glossy rays and
    your transparency.)  You can the use the mouse to rotate the scene
    to see the rays from a different viewpoint.  The rays are
    coloured:

      blue:   a ray that hit an object
      grey:   a ray that did not hit an object
      yellow: a shadow ray that was sent toward a point light source

    The first blue ray is the ray from the eye through the pixel that
    you clicked on.  This ray won't be visible until you rotate the
    viewpoint to see this ray from the side.

    MIDDLE-CLICK and hold to see a magnified view of the output under
    the mouse cursor.  (This is useful for debugging your pixel
    antialiasing.)

    RIGHT-CLICK on a pixel to set the 'debug' flag in the code to be
    true when raytracing that particular pixel.  You can then add
    print statements to your code that are executed only when that
    pixel is being raytraced.  This lets you debug a particular pixel
    without getting reams of printed output for all pixels.

1.3 How it works

  As long as you're dragging the mouse to shift the viewpoint, the scene
  will be redrawn quickly using OpenGL.  As soon as you stop dragging the
  mouse, the raytracing code is called, and eventually a raytraced image
  is shown.  You can drag the mouse again while the raytracing is being
  done; the raytracing will be restarted as soon as you stop dragging.

2. Code

  All of the the important raytracing functions are in scene.cpp.
  Make sure that you understand everything in that file.  The
  renderRT() function calculates the (raytraced) colour of the next
  pixel, and stores it.  The renderGL() function renders the whole
  scene immediately by calling the renderGL() functions of the objects
  in the scene.

3. Input File Format

  The scene description is stored in a file.  In the 'worlds'
  directory, see testBasic, testGlossy, and testTransparent for
  examples and for the specific format. The scene description consists
  (so far) of these objects:

    sphere
    triangle
    wavefront

  In the scene description, you can define other things, like:

    material   A material has a name and the standard material
	       properties (Ka, Kd, Ks, n, g, Ie, alpha).  It also can
	       (optionally) have a texture map and a bump map.  Code
	       is provided to read and store these maps.  The bump
	       mapping code isn't implemented, though.

    eye        This just defines the camera parameters.

    light      This defines the position and colour of a light.  You may
	       have as many lights as you wish (two or three is
	       usually good).
